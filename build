#!/usr/bin/env python3

import argparse
import argcomplete

import os.path
import glob

from subprocess import Popen, PIPE, STDOUT
from termcolor import colored
import re


def main(args):
    files = glob.glob("_compiler/gmake2/*/Makefile")
    dirs = [os.path.dirname(f) for f in files]

    for dir_name in dirs:
        for config in args.config:
            command = f"make --directory={dir_name} --stop config={config}_x86_64"
            print(command)
            if args.dry_run:
                continue
            p = Popen(command, stdout=PIPE, stderr=STDOUT, shell=True)

            while True:
                line = p.stdout.readline()
                if not line:
                    break
                line = line.decode()
                if re.match(r'^\s+File .* line \d+.*', line):
                    print(colored(line, 'red'), end='')
                elif re.match(r'.*[Ww]arning.*', line):
                    print(colored(line, 'yellow'), end='')
                elif re.match(r'.*tools/packman/python.sh.*', line) or \
                        re.match(r'^g\+\+.*', line) or \
                        re.match(r'.*nvcc.*', line):
                    print(colored(line, 'green'), end='')
                else:
                    print(line, end='')


def get_args():
    parser = argparse.ArgumentParser("Build with existing makefiles")
    parser.add_argument('-c', '--config', type=str, nargs='+',
                        choices=["release", "debug"], default=["release"])
    parser.add_argument('-n', '--dry-run', action='store_true', help='dry-run')

    argcomplete.autocomplete(parser)
    parsed_args = parser.parse_args()
    return parsed_args


if __name__ == '__main__':
    the_args = get_args()
    main(the_args)
